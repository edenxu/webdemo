<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/beans        
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd        
                        http://www.springframework.org/schema/context        
                        http://www.springframework.org/schema/context/spring-context-4.2.xsd        
                        http://www.springframework.org/schema/mvc        
                        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd    
                        http://www.springframework.org/schema/cache     
                        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd">

	<!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
	<cache:annotation-driven cache-manager="cacheManager" key-generator="keyGenerator"/>

	<!-- 配置 JedisPoolConfig 实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大空闲数 -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!--连接池的最大数据库连接数 -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!--最大建立连接等待时间 -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟) -->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
		<!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3 -->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
		<!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个 -->
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
		<!--在空闲时检查有效性, 默认false -->
		<property name="testWhileIdle" value="${redis.testWhileIdle}" />
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!--IP地址 -->
		<property name="hostName" value="${redis.host}"></property>
		<!--端口号 -->
		<property name="port" value="${redis.port}"></property>
		<!--如果Redis设置有密码 -->
		<property name="password" value="${redis.pass}" />
		<!--客户端超时时间单位是毫秒 -->
		<property name="timeout" value="${redis.timeout}"></property>
		<!--redis数据库序号，redis默认有16个库（从0-15），这里默认是0 -->
		<property name="database" value="${redis.dbIndex}" />
		<property name="poolConfig" ref="poolConfig" />
	</bean>

	<!-- 配置RedisTemplate -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!--如果不配置Serializer，那么存储的时候缺省使用String，如果用User类型存储，那么会提示错误User can't cast 
			to String！！ -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<bean id="keyGenerator" class=" cn.com.gxbolian.databank.util.DefaultKeyGenerator" />


	<!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<!-- 配置 redisTemplate -->
		<constructor-arg index="0" ref="redisTemplate" />
		<!-- 过期时间 -->
		<property name="defaultExpiration" value="300000" />
		<!-- 支持事务 -->
		<property name="transactionAware" value="true" />
	</bean>

</beans>  